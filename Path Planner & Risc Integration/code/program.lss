
.temp.file.elf:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    d  .init	00000000 .init
00000054 l    d  .text	00000000 .text
02000000 l    d  .data	00000000 .data
02000000 l    d  .bss	00000000 .bss
02000000 l    d  .stack	00000000 .stack
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 tls.c
00000000 l    df *ABS*	00000000 
0000019d l       .debug_info	00000000 
0000019d l       .debug_info	00000000 
0000019d l       .debug_info	00000000 
0000019d l       .debug_info	00000000 
0000019d l       .debug_info	00000000 
0000019d l       .debug_info	00000000 
0000019d l       .debug_info	00000000 
0000019d l       .debug_info	00000000 
0000019d l       .debug_info	00000000 
0000019d l       .debug_info	00000000 
0000019d l       .debug_info	00000000 
0000019d l       .debug_info	00000000 
0000019d l       .debug_info	00000000 
0000019d l       .debug_info	00000000 
0000019d l       .debug_info	00000000 
0000019d l       .debug_info	00000000 
0000019d l       .debug_info	00000000 
0000019d l       .debug_info	00000000 
0000019d l       .debug_info	00000000 
0000019d l       .debug_info	00000000 
00000000 g       *ABS*	00000000 __data_size
02000800 g       .data	00000000 __global_pointer$
02000000 g       .bss	00000000 __tls_base
00000400 g       *ABS*	00000000 __flash_size
00000008 g       *ABS*	00000000 __stack_size
00000000 g       *ABS*	00000000 __bss_size
000002dc g     F .text	00000024 memcpy
02000000 g       .bss	00000000 __bss_end
00000000 g       *ABS*	00000000 __tbss_size
000002d4 g     F .text	00000008 _set_tls
00000000 g     F .init	00000000 _start
02000000 g       *ABS*	00000000 __ram
02000000 g       .bss	00000000 __data_end
0000031c g       .text	00000000 __text_end
02000000 g       .bss	00000000 __bss_start
00000300 g     F .text	0000001c memset
00000054 g     F .text	00000280 main
00000040 g       *ABS*	00000000 __ram_size
0000019d  w      .debug_info	00000000 .hidden path_planner.c.55bc862e
02000040 g       .init	00000000 __stack
00000000 g     F *ABS*	00000000 vfscanf
00000320 g       *ABS*	00000000 __data_source
00000000 g       *ABS*	00000000 __flash
02000000 g       .data	00000000 __data_start
00000000 g     F *ABS*	00000000 vfprintf



Disassembly of section .init:

00000000 <_start>:
   0:	    02000117          	auipc	x2,0x2000
   4:	    04010113          	addi	x2,x2,64 # 2000040 <__stack>
   8:	    02000197          	auipc	x3,0x2000
   c:	    7f818193          	addi	x3,x3,2040 # 2000800 <__global_pointer$>
  10:	    02000517          	auipc	x10,0x2000
  14:	    ff050513          	addi	x10,x10,-16 # 2000000 <__bss_end>
  18:	    32000593          	addi	x11,x0,800
  1c:	    00000613          	addi	x12,x0,0
  20:	    2bc000ef          	jal	x1,2dc <memcpy>
  24:	    02000517          	auipc	x10,0x2000
  28:	    fdc50513          	addi	x10,x10,-36 # 2000000 <__bss_end>
  2c:	    00000593          	addi	x11,x0,0
  30:	    00000613          	addi	x12,x0,0
  34:	    2cc000ef          	jal	x1,300 <memset>
  38:	    02000517          	auipc	x10,0x2000
  3c:	    fc850513          	addi	x10,x10,-56 # 2000000 <__bss_end>
  40:	    294000ef          	jal	x1,2d4 <_set_tls>
  44:	    00000513          	addi	x10,x0,0
  48:	    00000593          	addi	x11,x0,0
  4c:	    008000ef          	jal	x1,54 <main>
  50:	/-- 0000006f          	jal	x0,50 <__ram_size+0x10>

Disassembly of section .text:

00000054 <main>:
     ###     void _put_str(char *str) { }
     ### 
     ### #endif
     ### 
     ### // main function
     ### int main(int argc, char const *argv[]) {
  54:	                               ff010113          	addi	x2,x2,-16
  58:	                               00112623          	sw	x1,12(x2)
  5c:	                               00812423          	sw	x8,8(x2)
     ###         uint8_t *path_planned = ( uint8_t *) 0x020000ef;
     ###         uint8_t idx = (volatile uint8_t) 0x0200010e;
     ###     #endif
     ### 
     ###     graph[0]=1090;
     ###     graph[1]=2053; 
  60:	                               00001737          	lui	x14,0x1
     ###     graph[0]=1090;
  64:	                               02000437          	lui	x8,0x2000
  68:	                               44200793          	addi	x15,x0,1090
  6c:	                               00f42823          	sw	x15,16(x8) # 2000010 <__bss_end+0x10>
     ###     graph[1]=2053; 
  70:	                               80570793          	addi	x15,x14,-2043 # 805 <__flash_size+0x405>
  74:	                               00f42a23          	sw	x15,20(x8)
     ###     graph[2]=58; 
  78:	                               03a00793          	addi	x15,x0,58
  7c:	                               00f42c23          	sw	x15,24(x8)
     ###     graph[3]=4; 
  80:	                               00400793          	addi	x15,x0,4
  84:	                               00f42e23          	sw	x15,28(x8)
     ###     graph[4]=4;
  88:	                               02f42023          	sw	x15,32(x8)
     ###     graph[5]=4; 
  8c:	                               02f42223          	sw	x15,36(x8)
     ###     graph[6]=897; 
  90:	                               38100793          	addi	x15,x0,897
  94:	                               02f42423          	sw	x15,40(x8)
     ###     graph[7]=64; 
  98:	                               04000793          	addi	x15,x0,64
  9c:	                               02f42623          	sw	x15,44(x8)
     ###     graph[8]=64; 
  a0:	                               02f42823          	sw	x15,48(x8)
     ###     graph[9]=64;
  a4:	                               02f42a23          	sw	x15,52(x8)
     ###     graph[10]=83888129; 
  a8:	                               050017b7          	lui	x15,0x5001
  ac:	                               80178793          	addi	x15,x15,-2047 # 5000801 <__global_pointer$+0x3000001>
  b0:	                               02f42c23          	sw	x15,56(x8)
     ###     graph[11]=529410; 
  b4:	                               000817b7          	lui	x15,0x81
  b8:	                               40278793          	addi	x15,x15,1026 # 81402 <__flash_size+0x81002>
  bc:	                               02f42e23          	sw	x15,60(x8)
     ###     graph[12]=26624; 
  c0:	                               000077b7          	lui	x15,0x7
  c4:	                               80078793          	addi	x15,x15,-2048 # 6800 <__flash_size+0x6400>
  c8:	                               04f42023          	sw	x15,64(x8)
     ###     graph[13]=4096;
     ###     graph[14]=102400; 
  cc:	                               000197b7          	lui	x15,0x19
  d0:	                               04f42423          	sw	x15,72(x8)
     ###     graph[15]=16384; 
  d4:	                               000047b7          	lui	x15,0x4
  d8:	                               04f42623          	sw	x15,76(x8)
     ###     graph[16]=409600; 
  dc:	                               000647b7          	lui	x15,0x64
  e0:	                               04f42823          	sw	x15,80(x8)
     ###     graph[17]=65536;
  e4:	                               000107b7          	lui	x15,0x10
  e8:	                               04f42a23          	sw	x15,84(x8)
     ###     graph[18]=2686976; 
  ec:	                               002907b7          	lui	x15,0x290
  f0:	                               04f42c23          	sw	x15,88(x8)
     ###     graph[19]=1312768; 
  f4:	                               001417b7          	lui	x15,0x141
  f8:	                               80078793          	addi	x15,x15,-2048 # 140800 <__flash_size+0x140400>
  fc:	                               04f42e23          	sw	x15,92(x8)
     ###     graph[20]=524288; 
 100:	                               000807b7          	lui	x15,0x80
 104:	                               06f42023          	sw	x15,96(x8)
     ###     graph[21]=12845056;
 108:	                               00c407b7          	lui	x15,0xc40
 10c:	                               06f42223          	sw	x15,100(x8)
     ###     graph[22]=2097152; 
 110:	                               002007b7          	lui	x15,0x200
 114:	                               06f42423          	sw	x15,104(x8)
     ###     graph[23]=1092616192; 
 118:	                               412007b7          	lui	x15,0x41200
 11c:	                               06f42623          	sw	x15,108(x8)
     ###     graph[24]=41944064; 
 120:	                               028007b7          	lui	x15,0x2800
 124:	                               40078793          	addi	x15,x15,1024 # 2800400 <__global_pointer$+0x7ffc00>
 128:	                               06f42823          	sw	x15,112(x8)
     ###     graph[25]=16777216;
 12c:	                               010007b7          	lui	x15,0x1000
 130:	                               06f42a23          	sw	x15,116(x8)
     ###     graph[26]=402654208; 
 134:	                               180007b7          	lui	x15,0x18000
 138:	                               40078793          	addi	x15,x15,1024 # 18000400 <__global_pointer$+0x15fffc00>
 13c:	                               06f42c23          	sw	x15,120(x8)
     ###     graph[27]=67108864; 
 140:	                               040007b7          	lui	x15,0x4000
 144:	                               06f42e23          	sw	x15,124(x8)
     ###     graph[28]=1677721600; 
 148:	                               640007b7          	lui	x15,0x64000
 14c:	                               08f42023          	sw	x15,128(x8)
     ###     graph[29]=268435456;
 150:	                               100007b7          	lui	x15,0x10000
     ###     graph[13]=4096;
 154:	                               04e42223          	sw	x14,68(x8)
     ###     graph[29]=268435456;
 158:	                               08f42223          	sw	x15,132(x8)
     ###     graph[30]=2424307712; 
 15c:	                               908007b7          	lui	x15,0x90800
 160:	                               08f42423          	sw	x15,136(x8)
     ###     graph[31]=1073741824;
 164:	                               400007b7          	lui	x15,0x40000
 168:	                               08f42623          	sw	x15,140(x8)
     ### 
     ###     for(int i=0; i<V; i++) {
     ###         distance[i] = 40;
 16c:	                               02000613          	addi	x12,x0,32
 170:	                               02800593          	addi	x11,x0,40
 174:	                               0d040513          	addi	x10,x8,208
 178:	                               188000ef          	jal	x1,300 <memset>
     ###         previous[i] = 255;
 17c:	                               02000613          	addi	x12,x0,32
 180:	                               0ff00593          	addi	x11,x0,255
 184:	                               0b140513          	addi	x10,x8,177
 188:	                               178000ef          	jal	x1,300 <memset>
     ###     }    
     ###     distance[START_POINT] = 0;
 18c:	                               00044783          	lbu	x15,0(x8)
 190:	                               020005b7          	lui	x11,0x2000
 194:	                               01f00613          	addi	x12,x0,31
 198:	                               0ff7f793          	andi	x15,x15,255
 19c:	                               00f40433          	add	x8,x8,x15
 1a0:	                               0c040823          	sb	x0,208(x8)
     ### 
     ###     for (int i = 0; i < V - 1; i++) {
 1a4:	                               0d058813          	addi	x16,x11,208 # 20000d0 <__stack+0x90>
     ###         for (int u = 0; u < V; u++) {
     ###             if (distance[u] == 40) continue; // Skip unreachable nodes
 1a8:	                               02800e93          	addi	x29,x0,40
 1ac:	                               01058f13          	addi	x30,x11,16
     ###             for (int v = 0; v < V; v++) {
     ###                 if (graph[u] & (1 << v)) { // Check if there's an edge from u to v
 1b0:	                               00100f93          	addi	x31,x0,1
     ###             for (int v = 0; v < V; v++) {
 1b4:	                               02000893          	addi	x17,x0,32
     ###         for (int u = 0; u < V; u++) {
 1b8:	                        /----> 00000793          	addi	x15,x0,0
     ###             if (distance[u] == 40) continue; // Skip unreachable nodes
 1bc:	                        |  /-> 01078333          	add	x6,x15,x16
 1c0:	                        |  |   00034703          	lbu	x14,0(x6)
 1c4:	                     /--|--|-- 07d71c63          	bne	x14,x29,23c <path_planner.c.55bc862e+0x9f>
     ###         for (int u = 0; u < V; u++) {
 1c8:	   /-----------------|--|--|-> 00178793          	addi	x15,x15,1 # 40000001 <__global_pointer$+0x3dfff801>
 1cc:	   |                 |  |  \-- ff1798e3          	bne	x15,x17,1bc <path_planner.c.55bc862e+0x1f>
     ###     for (int i = 0; i < V - 1; i++) {
 1d0:	   |                 |  |      fff60613          	addi	x12,x12,-1
 1d4:	   |                 |  \----- fe0612e3          	bne	x12,x0,1b8 <path_planner.c.55bc862e+0x1b>
     ###         }
     ###     }
     ### 
     ### 
     ###     idx = 0;
     ###     for (int j = END_POINT; j != 255; j = previous[j]) {
 1d8:	   |                 |         020007b7          	lui	x15,0x2000
 1dc:	   |                 |         0047c703          	lbu	x14,4(x15) # 2000004 <__bss_end+0x4>
 1e0:	   |                 |         0ff00613          	addi	x12,x0,255
     ###     idx = 0;
 1e4:	   |                 |         00000793          	addi	x15,x0,0
     ###     for (int j = END_POINT; j != 255; j = previous[j]) {
 1e8:	   |                 |         0ff77713          	andi	x14,x14,255
     ###         path_planned[idx++] = j;
 1ec:	   |                 |         020006b7          	lui	x13,0x2000
     ###     for (int j = END_POINT; j != 255; j = previous[j]) {
 1f0:	   |     /--------/--|-------X 08c71a63          	bne	x14,x12,284 <path_planner.c.55bc862e+0xe7>
 1f4:	   |     |        |  |         02000737          	lui	x14,0x2000
 1f8:	   |     |        |  |         0ef70813          	addi	x16,x14,239 # 20000ef <__stack+0xaf>
 1fc:	   |     |        |  |         0ee70713          	addi	x14,x14,238
     ###     }
     ### 
     ###     
     ### for (int i = 0; i < idx / 2; i++) {
 200:	   |     |        |  |         0017d513          	srli	x10,x15,0x1
 204:	   |     |        |  |         00000693          	addi	x13,x0,0
 208:	   |     |        |  |         00e78733          	add	x14,x15,x14
 20c:	   |  /--|-----/--|--|-------X 08a6ca63          	blt	x13,x10,2a0 <path_planner.c.55bc862e+0x103>
     ### 
     ### 
     ### 
     ### 
     ### 
     ###     for (int i = 0; i < idx; ++i) {
 210:	   |  |  |     |  |  |         00000713          	addi	x14,x0,0
     ###         NODE_POINT = path_planned[i];
 214:	   |  |  |     |  |  |         020006b7          	lui	x13,0x2000
     ###     for (int i = 0; i < idx; ++i) {
 218:	/--|--|--|--/--|--|--|-------X 0af74463          	blt	x14,x15,2c0 <path_planner.c.55bc862e+0x123>
     ###     }
     ###     CPU_DONE = 1;
 21c:	|  |  |  |  |  |  |  |         020007b7          	lui	x15,0x2000
 220:	|  |  |  |  |  |  |  |         00100713          	addi	x14,x0,1
 224:	|  |  |  |  |  |  |  |         00e78623          	sb	x14,12(x15) # 200000c <__bss_end+0xc>
     ###         }
     ###         _put_str("################################\n");
     ###     #endif
     ### 
     ###     return 0;
     ### }
 228:	|  |  |  |  |  |  |  |         00c12083          	lw	x1,12(x2)
 22c:	|  |  |  |  |  |  |  |         00812403          	lw	x8,8(x2)
 230:	|  |  |  |  |  |  |  |         00000513          	addi	x10,x0,0
 234:	|  |  |  |  |  |  |  |         01010113          	addi	x2,x2,16
 238:	|  |  |  |  |  |  |  |         00008067          	jalr	x0,0(x1)
 23c:	|  |  |  |  |  |  |  \-------> 00279513          	slli	x10,x15,0x2
 240:	|  |  |  |  |  |  |            01e50533          	add	x10,x10,x30
     ###             for (int v = 0; v < V; v++) {
 244:	|  |  |  |  |  |  |            00000713          	addi	x14,x0,0
     ###                 if (graph[u] & (1 << v)) { // Check if there's an edge from u to v
 248:	|  |  |  |  |  |  |     /----> 00052e03          	lw	x28,0(x10)
 24c:	|  |  |  |  |  |  |     |      00ef96b3          	sll	x13,x31,x14
 250:	|  |  |  |  |  |  |     |      01c6f6b3          	and	x13,x13,x28
 254:	|  |  |  |  |  |  |     |  /-- 02068263          	beq	x13,x0,278 <path_planner.c.55bc862e+0xdb>
     ###                     if (distance[u] + 1 < distance[v]) {
 258:	|  |  |  |  |  |  |     |  |   00034683          	lbu	x13,0(x6)
 25c:	|  |  |  |  |  |  |     |  |   01070e33          	add	x28,x14,x16
 260:	|  |  |  |  |  |  |     |  |   000e4283          	lbu	x5,0(x28)
 264:	|  |  |  |  |  |  |     |  |   00168693          	addi	x13,x13,1 # 2000001 <__bss_end+0x1>
 268:	|  |  |  |  |  |  |     |  +-- 0056d863          	bge	x13,x5,278 <path_planner.c.55bc862e+0xdb>
     ###                         distance[v] = distance[u] + 1;
 26c:	|  |  |  |  |  |  |     |  |   00de0023          	sb	x13,0(x28)
     ###                         previous[v] = u;
 270:	|  |  |  |  |  |  |     |  |   00e586b3          	add	x13,x11,x14
 274:	|  |  |  |  |  |  |     |  |   0af688a3          	sb	x15,177(x13)
     ###             for (int v = 0; v < V; v++) {
 278:	|  |  |  |  |  |  |     |  \-> 00170713          	addi	x14,x14,1
 27c:	|  |  |  |  |  |  |     \----- fd1716e3          	bne	x14,x17,248 <path_planner.c.55bc862e+0xab>
 280:	|  \--|--|--|--|--|----------- f49ff06f          	jal	x0,1c8 <path_planner.c.55bc862e+0x2b>
     ###         path_planned[idx++] = j;
 284:	|     |  |  |  |  \----------> 00178593          	addi	x11,x15,1
 288:	|     |  |  |  |               00f687b3          	add	x15,x13,x15
 28c:	|     |  |  |  |               0ee787a3          	sb	x14,239(x15)
     ###     for (int j = END_POINT; j != 255; j = previous[j]) {
 290:	|     |  |  |  |               00e68733          	add	x14,x13,x14
 294:	|     |  |  |  |               0b174703          	lbu	x14,177(x14)
     ###         path_planned[idx++] = j;
 298:	|     |  |  |  |               0ff5f793          	andi	x15,x11,255
 29c:	|     |  \--|--|-------------- f55ff06f          	jal	x0,1f0 <path_planner.c.55bc862e+0x53>
     ###     int temp = path_planned[i];
 2a0:	|     |     |  \-------------> 40d70633          	sub	x12,x14,x13
 2a4:	|     |     |                  010685b3          	add	x11,x13,x16
     ###     path_planned[i] = path_planned[j];
 2a8:	|     |     |                  00064303          	lbu	x6,0(x12)
     ###     int temp = path_planned[i];
 2ac:	|     |     |                  0005c883          	lbu	x17,0(x11)
     ### for (int i = 0; i < idx / 2; i++) {
 2b0:	|     |     |                  00168693          	addi	x13,x13,1
     ###     path_planned[i] = path_planned[j];
 2b4:	|     |     |                  00658023          	sb	x6,0(x11)
     ###     path_planned[j] = temp;
 2b8:	|     |     |                  01160023          	sb	x17,0(x12)
     ### for (int i = 0; i < idx / 2; i++) {
 2bc:	|     \-----|----------------- f51ff06f          	jal	x0,20c <path_planner.c.55bc862e+0x6f>
     ###         NODE_POINT = path_planned[i];
 2c0:	|           \----------------> 00e68633          	add	x12,x13,x14
 2c4:	|                              0ef64603          	lbu	x12,239(x12)
     ###     for (int i = 0; i < idx; ++i) {
 2c8:	|                              00170713          	addi	x14,x14,1
     ###         NODE_POINT = path_planned[i];
 2cc:	|                              00c68423          	sb	x12,8(x13)
     ###     for (int i = 0; i < idx; ++i) {
 2d0:	\----------------------------- f49ff06f          	jal	x0,218 <path_planner.c.55bc862e+0x7b>

000002d4 <_set_tls>:
 2d4:	00050213          	addi	x4,x10,0
 2d8:	00008067          	jalr	x0,0(x1)

000002dc <memcpy>:
 2dc:	       00050313          	addi	x6,x10,0
 2e0:	/----- 00060e63          	beq	x12,x0,2fc <memcpy+0x20>
 2e4:	|  /-> 00058383          	lb	x7,0(x11)
 2e8:	|  |   00730023          	sb	x7,0(x6)
 2ec:	|  |   fff60613          	addi	x12,x12,-1
 2f0:	|  |   00130313          	addi	x6,x6,1
 2f4:	|  |   00158593          	addi	x11,x11,1
 2f8:	|  \-- fe0616e3          	bne	x12,x0,2e4 <memcpy+0x8>
 2fc:	\----> 00008067          	jalr	x0,0(x1)

00000300 <memset>:
 300:	       00050313          	addi	x6,x10,0
 304:	/----- 00060a63          	beq	x12,x0,318 <memset+0x18>
 308:	|  /-> 00b30023          	sb	x11,0(x6)
 30c:	|  |   fff60613          	addi	x12,x12,-1
 310:	|  |   00130313          	addi	x6,x6,1
 314:	|  \-- fe061ae3          	bne	x12,x0,308 <memset+0x8>
 318:	\----> 00008067          	jalr	x0,0(x1)

0000031c <__text_end>:
 31c:	0000                	c.unimp
	...
